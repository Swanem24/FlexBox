package flexbox;

import java.text.DecimalFormat;
import javax.swing.JOptionPane;
/**
 *
 * @author UP818044, UP828826, UP866877, UP853094, UP863243
 */
public class UserInterface extends javax.swing.JFrame 
{
    public double Total = 0; //The total cost of the order
    public double height;
    public double length;
    public double width;
    public int quantity;
    
    public UserInterface() 
    {
        initComponents();
        
    }
    
    //Resets the value
    public void clearForm()
    {
        //  Clears the parameter text
        lengthInput.setText(null);
        widthInput.setText(null);
        heightInput.setText(null);   
       
        //  Clears the check boxes
        botReinforcement.setSelected(false);
        corReinforcement.setSelected(false);
        sealTop.setSelected(false);
        
        //  Resets the quantity 
        quantityInput.setValue(0);
        
        //  Resets the colour dropdown
        colourInput.setSelectedIndex(0);
        
        //Resets the grade dropdown
        gradeInput.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Banner = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        heightInput = new javax.swing.JTextField();
        widthInput = new javax.swing.JTextField();
        lengthInput = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        addOrdertoBasket = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        gradeInput = new javax.swing.JComboBox<>();
        botReinforcement = new javax.swing.JCheckBox();
        corReinforcement = new javax.swing.JCheckBox();
        sealTop = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        colourInput = new javax.swing.JComboBox<>();
        quantityInput = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        totalCost = new javax.swing.JTextField();
        orderArea = new javax.swing.JScrollPane();
        receipt = new javax.swing.JTextArea();
        resetOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FlexBox Ordering System");
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.blue);
        setType(java.awt.Window.Type.UTILITY);

        Banner.setFont(new java.awt.Font("Sitka Banner", 3, 36)); // NOI18N
        Banner.setText("FlexBox Ordering System");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Parameters");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Height (Meters):");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Width (Meters):");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Length (Meters):");

        heightInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heightInputActionPerformed(evt);
            }
        });

        widthInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthInputActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel6.setText("Additional Properties");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Colour:");

        addOrdertoBasket.setText("Add to Basket");
        addOrdertoBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrdertoBasketActionPerformed(evt);
            }
        });

        jButton3.setText("Reset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Grade:");

        gradeInput.setMaximumRowCount(5);
        gradeInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        gradeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeInputActionPerformed(evt);
            }
        });

        botReinforcement.setText("Bottom Reinfrocement");
        botReinforcement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botReinforcementActionPerformed(evt);
            }
        });

        corReinforcement.setText("Corner Reinforcement");
        corReinforcement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corReinforcementActionPerformed(evt);
            }
        });

        sealTop.setText("Sealable Top");
        sealTop.setToolTipText("");

        jLabel8.setText("Quantity:");

        colourInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Colour", "1 Colour", "2 Colour" }));

        quantityInput.setAutoscrolls(true);
        quantityInput.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                quantityInputStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(quantityInput)
                                .addGap(161, 161, 161))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(corReinforcement)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel5))
                                            .addGap(18, 18, 18)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(widthInput)
                                                    .addComponent(lengthInput, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                                                .addComponent(heightInput, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(35, 35, 35)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addGap(27, 27, 27))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(colourInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(131, 131, 131))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGap(28, 28, 28)
                                            .addComponent(addOrdertoBasket)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton3))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(gradeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(botReinforcement, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(sealTop)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(heightInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gradeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(widthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(colourInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(botReinforcement)
                .addGap(18, 18, 18)
                .addComponent(corReinforcement)
                .addGap(18, 18, 18)
                .addComponent(sealTop)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addOrdertoBasket, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel13.setText("Order Summary");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setText("Total Cost £");

        totalCost.setEditable(false);
        totalCost.setText("0.00");
        totalCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalCostActionPerformed(evt);
            }
        });

        receipt.setEditable(false);
        receipt.setColumns(20);
        receipt.setRows(5);
        orderArea.setViewportView(receipt);

        resetOrder.setText("Reset Order");
        resetOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderArea)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 267, Short.MAX_VALUE)
                        .addComponent(resetOrder)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalCost, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderArea, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetOrder))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Banner)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Banner)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void heightInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heightInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heightInputActionPerformed

    private void widthInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_widthInputActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        clearForm();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void addOrdertoBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrdertoBasketActionPerformed
        //validate and choose box
        
        try{
            //Get the dimensions to test for valid size
             width = Double.parseDouble(widthInput.getText());
             length = Double.parseDouble(lengthInput.getText());
             height = Double.parseDouble(heightInput.getText());
             quantity = (int) quantityInput.getValue();
            
            }catch(NumberFormatException e)
            { //The user didn't enter a number into the right fields.
                //Size values aren't doubles
                JOptionPane.showMessageDialog(null, "Size must be a number!", 
                        "Wrong Size", JOptionPane.ERROR_MESSAGE);
                        clearForm();
            }
            //Test if the dimensions are within the valid ranges.
            if ((width <= 0.1 || width > 10)||( height <= 0.1 || height > 10) ||( length <=0.1 || length > 10))
            {
                JOptionPane.showMessageDialog(null, "Box size limited to: \n - Min: 0.1m \n - Max: 10m", "Error", JOptionPane.ERROR_MESSAGE);
                clearForm();
            }
            else if(heightInput.getText().isEmpty()|| widthInput.getText().isEmpty()||lengthInput.getText().isEmpty())
            {
        
            JOptionPane.showMessageDialog(null,"Empty Fields.All fields must be filled");
            
            }
            else if(quantity <= 0)
            {
                JOptionPane.showMessageDialog(null, "Quantity Input is invalid: \n Quantity must be at least 1", "Error", JOptionPane.ERROR_MESSAGE);
                clearForm();
            }
            
           
                 
            else {
                //Get all the other variables needed to create the box from user inputs.
                int grade = gradeInput.getSelectedIndex() + 1;
                int colour = colourInput.getSelectedIndex();
                boolean bottomReinforcement = botReinforcement.isSelected();
                boolean cornerReinforcement = corReinforcement.isSelected();
                boolean sealableTops = sealTop.isSelected();
                int quantity = (int) quantityInput.getValue();
                //Now we will create the box
                createBox(grade, colour, bottomReinforcement, cornerReinforcement, height, width, length, quantity, sealableTops);
                clearForm();
                }
            

    }
    /**
     * Determine what box type the user is ordering and create a box of that type.
     * @param grade The grade of the box
     * @param colour How many colours the box has
     * @param bottomReinforcement  Does it have a reinforced bottom?
     * @param cornerReinforcement Does it have reinforced corners?
     * @param height The width of the box
     * @param width The length of the box
     * @param length The height of the box
     * @param quantity How many of the box is in the order
     * @param sealeableTops Does it have a sealable top?
     */
    public void createBox(int grade, int colour, boolean bottomReinforcement, boolean cornerReinforcement, double height, double width, double length, int quantity, boolean sealableTops){
    
        //Does the box exist?
        String valid = validateBox(grade, colour, bottomReinforcement, cornerReinforcement);        
        if(valid.equals("good")){ //The box exists.
            Box box;
            //Make the correct box
            if (colour == 0)
            {
                //Box Type 1
                box = new Box1(height, width, length, grade, sealableTops);
            }
            else if (colour == 1)
            { 
                //Box Type 2
                box = new Box2(height, width, length, grade, sealableTops);
            }
            else if (colour == 2 && bottomReinforcement == false)
            { 
                //Box Type 3
                box = new Box3(height, width, length, grade, sealableTops);
            }
            else if (colour == 2 && bottomReinforcement == true && cornerReinforcement == false)
            { 
                //Box Type 4
                box = new Box4(height, width, length, grade, sealableTops);
            }
            else
            { 
                //Box Type 5
                box = new Box5(height, width, length, grade, sealableTops);
            }
            
            //Print out the receipt
            writeToOrderBox(box, quantity);

        }
        else
        { //The box doesn't exist so send an error.
            JOptionPane.showMessageDialog(null, valid, "Box Not Available", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addOrdertoBasketActionPerformed

    private void gradeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeInputActionPerformed
        //
    }//GEN-LAST:event_gradeInputActionPerformed

    private void totalCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalCostActionPerformed

    private void botReinforcementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botReinforcementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botReinforcementActionPerformed

    private void corReinforcementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corReinforcementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_corReinforcementActionPerformed

    private void quantityInputStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_quantityInputStateChanged
        int val = (int) quantityInput.getValue(); //Get the quantity the user wanted
        //Is the quantity below 1?
        if (val<1){
            //Reset it back to 0
            quantityInput.setValue(0);
        } else if (val > 100) 
        { //Is it more than 100?
            //Reset it back to 100
            quantityInput.setValue(100);
        }
    }//GEN-LAST:event_quantityInputStateChanged

    private void resetOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetOrderActionPerformed
        receipt.setText(" ");
        totalCost.setText("0.00");
        Total = 0;
    }//GEN-LAST:event_resetOrderActionPerformed

/**
    * Print the new box into the orderArea and calculate the total cost of the
    * order.
    * @param box The box that was created.
    * @param quantity How many boxes of this type there are in the order.
    */
        public void writeToOrderBox(Box box, int quantity){
        //Set formatting 
        DecimalFormat dFormat = new DecimalFormat("0.00");
        
        receipt.setText(receipt.getText() + "\n--------------------------------------");
        receipt.setText(receipt.getText() + "\n BoxType:" + box.getType());
        
        //Get the extras from the box class
        receipt.setText(receipt.getText() + box.getReceipt());
        receipt.setText(receipt.getText() + "\n Quantity: \tx" + quantity);
        double itmTotal = (double)(Math.round(box.getTotal()*quantity*100))/100;
        receipt.setText(receipt.getText() + "\n Item Total: \t£" + dFormat.format(itmTotal));
        receipt.setText(receipt.getText() + "\n--------------------------------------");
        
        //Calculate the total cost of the order
        Total += box.getTotal() * quantity;
        //Format the total to 2 deciaml places
        Total = (double)(Math.round(Total*100))/100;
        totalCost.setText("£" + dFormat.format(Total));
    }
      
public static void infoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "Message: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    
private String validateBox(int grade, int colour, boolean bottomReinforcement, boolean cornerReinforcement){
        boolean fail = false;
        String cause = ""; //We need a variable to store all the issues
        
        //Reinforced corners MUST have reinforced bottom
        if(cornerReinforcement &&! bottomReinforcement){
            fail = true;
            cause += "Reinforced Bottom is required for Reinforced Corners \n";
        }
        //Grade 2 or above is needed for reinforced bottom
        if(bottomReinforcement && grade == 1){
            fail = true;
            cause += "Grade 2 or higher is required for Reinforced Bottom \n";
        }
        //Grade 3 or above is needed for reinforced corners
        if(cornerReinforcement && grade < 3){
            fail = true;
            cause += "Grade 3 or higher is required for Reinforced Corners \n";
        }
        //You need 2 colours for reinforced bottom
        if (colour != 2 && bottomReinforcement){
            fail = true;
            cause += "2 Colours are required for Reinforced Bottom \n";
        }
        //Grade 2 or higher is needed for 2 colours
        if(colour == 2 && grade == 1){
            fail = true;
            cause += "Grade 2 or higher is required for 2 Colours \n";
        }
        //Grade 2-4 is needed for only 1 colour
        if((grade < 2 || grade > 4) && colour == 1){
            fail = true;
            cause += "Grade 2-4 is required for 1 Colour \n";
        }
        //Grade 1-3 is needed for no colours
        if(colour == 0 && grade > 3){
            fail = true;
            cause += "Grade 3 or lower is required for no Colours \n";
        }
        
        //Did the validation fail?
        if(fail){
            //Return everything that's wrong
            return cause;
        } else {
            //It didn't fail so return "good"
            return "good";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Banner;
    private javax.swing.JButton addOrdertoBasket;
    private javax.swing.JCheckBox botReinforcement;
    private javax.swing.JComboBox<String> colourInput;
    private javax.swing.JCheckBox corReinforcement;
    private javax.swing.JComboBox<String> gradeInput;
    private javax.swing.JTextField heightInput;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField lengthInput;
    private javax.swing.JScrollPane orderArea;
    private javax.swing.JSpinner quantityInput;
    private javax.swing.JTextArea receipt;
    private javax.swing.JButton resetOrder;
    private javax.swing.JCheckBox sealTop;
    private javax.swing.JTextField totalCost;
    private javax.swing.JTextField widthInput;
    // End of variables declaration//GEN-END:variables
}
